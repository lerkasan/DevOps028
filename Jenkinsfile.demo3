#!groovy

pipeline {
    agent {
        label 'slave-node'
    }
    tools {
        jdk 'oracle-jdk8u144-linux-x64'
        maven "maven-3.5.0"
    }
    options {
        timestamps()
    }
    parameters {
        string(name: 'bucket_name', defaultValue: 'demo2-ssa', description: 'Bucket with JDK, liquibase binaries and artifact for Demo2')
        string(name: 'aws_ecr_url', defaultValue: 'https://370535134506.dkr.ecr.us-west-2.amazonaws.com', description: 'AWS Docker Container Registry URL')
    }
    environment {
        AWS_DEFAULT_REGION="us-west-2"
        AWS_SECRET_ACCESS_KEY = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_secret_access_key --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        AWS_ACCESS_KEY_ID = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_access_key_id --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        DB_NAME = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_name --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()

        DB_USER = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_user --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()

        DB_PASS = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_pass --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        DB_PORT=5432
        BUCKET_NAME="${params.bucket_name}"
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Cleaning workspace ..."
                cleanWs()
                echo "Checkout master branch to workspace folder and checkout jenkins branch to subfolder 'jenkins'"
                checkout(
                        [$class: 'GitSCM',
                         branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                         browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/lerkasan/DevOps028.git'],
                         extensions: [[$class: 'CleanBeforeCheckout']],
                         gitTool: 'git',
                         submoduleCfg: [],
                         userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git', credentialsId: 'github_lerkasan']]
                        ])
            }
        }
        stage("Test and build jar") {
            steps {
                sh "javac -version"
                echo "Testing project"
                sh "mvn clean test"
                echo "Building jar ..."
                sh "mvn clean package"
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', onlyIfSuccessful: true
                    echo "Copying artifact to S3 bucket ..."
                    sh 'ARTIFACT_FILENAME=`ls ${WORKSPACE}/target | grep jar | grep -v original` && ' +
                            'aws s3 cp "${WORKSPACE}/target/${ARTIFACT_FILENAME}" "s3://demo2-ssa/artifacts/${ARTIFACT_FILENAME}" && ' +
                            'aws ssm put-parameter --name demo2_artifact_filename --value="${ARTIFACT_FILENAME}" --type String --overwrite'
                }
            }
        }
        stage("Build docker images") {
            environment {
                ARTIFACT_FILENAME = sh(script: "ls ${WORKSPACE}/target | grep jar | grep -v original",
                        returnStdout: true
                ).trim()
                DB_NAME = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_name --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()

                DB_USER = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_user --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()

                DB_PASS = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_pass --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()
                DB_PORT=5432
            }
            steps {
                echo "Building docker images ..."
                sh "cp ${WORKSPACE}/target/${ARTIFACT_FILENAME} ."
                script {
                    jdkImage = docker.build("jdk8:152", "-f Dockerfile.jdk .")
                    dbImage = docker.build("db:latest", "--build-arg DB_NAME=${DB_NAME} --build-arg DB_USER=${DB_USER} --build-arg DB_PASS=${DB_PASS} -f Dockerfile.db .")
//                    samsaraImage = docker.build("samsara:latest", "--build-arg ARTIFACT_FILENAME=${ARTIFACT_FILENAME} --build-arg DB_NAME=${DB_NAME} --build-arg DB_USER=${DB_USER} --build-arg DB_PASS=${DB_PASS} -f Dockerfile.webapp .")
                }
            }
        }
        stage("Push docker images to AWS ECR") {
//            environment {
//                AWS_ECR_URL="${params.aws_ecr_url}"
//            }
            steps {
                echo "Pushing docker images to AWS ECR ..."
//              withEnv([AWS_ECR_URL = "${params.aws_ecr_url}"]) {
                sh 'docker_pass=`aws ecr get-login --no-include-email --region us-west-2 | awk \'{print \$6}\'` && docker login -u AWS -p "${docker_pass}" https://370535134506.dkr.ecr.us-west-2.amazonaws.com/demo3'
//                  sh 'docker_login_command=`aws ecr get-login --no-include-email --region us-west-2` && "${docker_login_command}"'
//              }
                script {
                    docker.withRegistry("${params.aws_ecr_url}") {
//                      docker.withRegistry("${params.aws_ecr_url}", 'ecr:us-west-2:demo3-aws-ecr-credentials') {
                        jdkImage.push()
                        dbImage.push()
//                        samsaraImage.push()
                    }
                }
            }
            post {
                always {
                    // Delete Docker images from Jenkins slave node after pushing it to AWS Container Registry
                    sh "docker rmi `docker images -q` | true"
                }
            }
        }
        stage("Create cluster") {
            steps {
                echo "Creating cluster ..."
                sh "chmod +x kubernetes/prepare-infra.sh"
                sh "kubernetes/prepare-infra.sh"
            }
        }
        stage("Deploy webapp") {
            environment {
                DB_HOST = sh(
                        script: "kubectl describe services samsara-postgres | grep 'LoadBalancer Ingress:' | cut -d':' -f2 | tr -d ' '",
                        returnStdout: true
                ).trim()
                DB_NAME = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_name --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()

                DB_USER = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_user --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()

                DB_PASS = sh(
                        script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_pass --with-decryption --output text | awk '{print \$4}'",
                        returnStdout: true
                ).trim()
                DB_PORT=5432
                ARTIFACT_FILENAME = sh(script: "ls ${WORKSPACE}/target | grep jar | grep -v original",
                        returnStdout: true
                ).trim()
            }
            steps {
                script {
                    samsaraImage = docker.build("samsara:latest", "--build-arg ARTIFACT_FILENAME=${ARTIFACT_FILENAME} --build-arg DB_NAME=${DB_NAME} --build-arg DB_USER=${DB_USER} --build-arg DB_PASS=${DB_PASS} -f Dockerfile.webapp .")
                    docker.withRegistry("${params.aws_ecr_url}") {
                        samsaraImage.push()
                    }
                }
                echo "Deploying web application ..."
                sh "chmod +x kubernetes/deploy.sh"
                sh "kubernetes/deploy.sh"
            }
        }
//            post {
//                success {
//                    sh "jenkins/jenkins/pipeline/check-webapp-response.sh"
//                }
//            }
    }
    post {
        success {
            emailext body: '${BUILD_LOG_REGEX, regex="Webapp endpoint", showTruncatedLines=false}',
                    subject: 'Web application Samsara was deployed',
                    to: 'lerkasan@gmail.com'
        }
        failure {
            emailext attachLog: true,
                    body: 'Build log is attached.',
                    subject: 'Web application Samsara deploy failed',
                    to: 'lerkasan@gmail.com'
        }
    }
}
