#!groovy

pipeline {
    agent {
        label 'slave-node'
    }
    options {
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                checkout(
                        poll: false,
                        changelog: false,
                        scm: [$class: 'GitSCM',
                              branches: [[name: '*jenkins']], doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'IgnoreNotifyCommit']],
                              gitTool: 'git-slave',
                              submoduleCfg: [],
                              userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git', credentialsId: 'github_lerkasan']]
                        ])
            }
        }
        stage("Create slave nodes") {
            steps {
                echo "Creating EC2 instances to be slave nodes at Jenkins ..."
                sh "chmod +x jenkins/slave-nodes/*.sh"
                sh "jenkins/slave-nodes/start-slave-nodes.sh"
            }
        }
        environment {
            SLAVE_IP_ADDRESSES = sh(
                    script: "aws ec2 describe-instances --filters \"Name=tag:Name,Values=jenkins-slaves\" " +
                            "--query 'Reservations[*].Instances[*].[State.Name,InstanceId,PrivateIpAddress,PublicDnsName]' " +
                            "--output text | grep -v -e terminated | awk '{print \$3}' | tr '\\n' ' '",
                    returnStdout: true
            ).trim()
        }
        stage("Connect slave nodes") {
            steps {
                echo "Connecting slave nodes to Jenkins ..."
//                script {
//                     load 'connect_slave_nodes.groovy'
//                }


                script {
                    import hudson.model.*
                    import jenkins.model.*
                    import hudson.slaves.*
                    import hudson.plugins.sshslaves.SSHLauncher
                    import hudson.plugins.sshslaves.verifiers.*

                    def connectNode(String privateIp, String nodeName) {
                        ManuallyTrustedKeyVerificationStrategy manuallyTrustedKeyVerificationStrategy = new ManuallyTrustedKeyVerificationStrategy(false)
                        ComputerLauncher launcher = new SSHLauncher(
                                privateIp, //"172.31.27.202", // Host
                                22, // Port
                                "18ce16e0-2700-42d5-b9b0-8d7d8ec5f143", // Credentials ID
                                (String) null, // JVM Options
                                (String) null, // JavaPath
                                (String) null, // Prefix Start Slave Command
                                (String) null, // Suffix Start Slave Command
                                (Integer) null, // Connection Timeout in Seconds
                                (Integer) null, // Maximum Number of Retries
                                (Integer) null, // The number of seconds to wait between retries
                                manuallyTrustedKeyVerificationStrategy // Manually trusted Key Verification Strategy
                        )
                        Slave agent = new DumbSlave(
                                nodeName, // "node3",
                                "/home/ec2-user",
                                launcher)
                        agent.nodeDescription = nodeName //"node3"
                        agent.numExecutors = 3
                        agent.labelString = "slave-node"
                        agent.mode = Node.Mode.NORMAL
                        agent.retentionStrategy = new RetentionStrategy.Always()
                        Jenkins.instance.addNode(agent)
                    }

                    String[] slavesIpAddresses = ${SLAVE_IP_ADDRESSES}.split(' ')
                    int counter = 1
                    for (ipAddress in slavesIpAddresses) {
                        connectNode(ipAddress, "node"+counter)
                        counter++
                    }
                }
            }
        }
    }
}
