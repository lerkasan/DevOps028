#!groovy
package kops

pipeline {
    agent {
        label 'slave-node'
    }
    options {
        timestamps()
    }
    parameters {
        string(name: 'cluster_dns', defaultValue: 'demo3-cluster.k8s.local', description: 'Cluster name')
    }
    environment {
        AWS_DEFAULT_REGION="us-west-2"
        AWS_SECRET_ACCESS_KEY = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_secret_access_key --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        AWS_ACCESS_KEY_ID = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_access_key_id --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Cleaning workspace ..."
                cleanWs()
                echo "Checkout master branch to workspace folder ..."
                checkout(
                        [$class: 'GitSCM',
                         branches: [[name: '*/jenkins']], doGenerateSubmoduleConfigurations: false,
                         browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/lerkasan/DevOps028.git'],
                         extensions: [[$class: 'CleanBeforeCheckout']],
                         gitTool: 'git',
                         submoduleCfg: [],
                         userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git', credentialsId: 'github_lerkasan']]
                        ])
            }
        }
        stage("Build custom JDK docker image") {
            steps {
                echo "Building custom JDK docker image ..."
                sh "cp ${WORKSPACE}/target/${ARTIFACT_FILENAME} ."
                script {
                    jdkImage = docker.build("jdk8:latest", "jenkins/kops/jdk8")
                }
            }
        }
        stage("Push custom JDK docker image to AWS ECR") {
//            environment {
//                AWS_ECR_URL="${params.aws_ecr_url}"
//            }
            steps {
                echo "Pushing docker image to AWS ECR ..."
//              withEnv([AWS_ECR_URL = "${params.aws_ecr_url}"]) {
                sh 'docker_pass=`aws ecr get-login --no-include-email --region us-west-2 | awk \'{print \$6}\'` && docker login -u AWS -p "${docker_pass}" https://370535134506.dkr.ecr.us-west-2.amazonaws.com/demo3'
//                  sh 'docker_login_command=`aws ecr get-login --no-include-email --region us-west-2` && "${docker_login_command}"'
//              }
                script {
                    docker.withRegistry("${params.aws_ecr_url}") {
//                      docker.withRegistry("${params.aws_ecr_url}", 'ecr:us-west-2:demo3-aws-ecr-credentials') {
                        docker.image("jdk8:latest").push()
                    }
                }
            }
            post {
                always {
                    // Delete Docker images from Jenkins slave node after pushing it to AWS Container Repository
                    sh "docker rmi jdk8:latest | true"
                }
            }
        }
        stage("Prepare Postgres image") {
            steps {
                echo "Preparing Postgres image ..."
                sh "docker pull postgres:latest"
                script {
                    docker.withRegistry("${params.aws_ecr_url}") {
//                      docker.withRegistry("${params.aws_ecr_url}", 'ecr:us-west-2:demo3-aws-ecr-credentials') {
                        docker.image("postgres:latest").push()
                    }
                }
            }
        }
        stage("Prepare AWS cluster infrastructure with kops") {
            steps {
                echo "Preparing AWS cluster infrastructure with kops ..."
                sh "chmod +x kops/prepare-infra.sh"
                sh "kops/prepare-infra.sh"
            }
        }
    }
}
