#!groovy

pipeline {
    agent {
        label 'slave-node'
    }
    tools {
        jdk 'oracle-jdk8u144-linux-x64'
        maven "maven-3.5.0"
    }
    options {
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Cleaning workspace ..."
                cleanWs()
                echo "Checkout master branch to workspace folder and checkout jenkins branch to subfolder 'jenkins'"
                checkout(
                        [$class: 'GitSCM',
                         branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                         browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/lerkasan/DevOps028.git'],
                         extensions: [[$class: 'CleanBeforeCheckout']],
                         gitTool: 'git-slave',
                         submoduleCfg: [],
                         userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git']]])
                checkout(
                        [$class: 'GitSCM',
                         branches: [[name: '*jenkins']], doGenerateSubmoduleConfigurations: false,
                         extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jenkins']],
                         gitTool: 'git-slave',
                         submoduleCfg: [],
                         userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git']]])
            }
        }
        // Let's create here AWS infrastructure and assume that it is our production environment that has already existed before running this pipeline
        // This stage should be ommited in real situation when we already have existing production environment
        stage("Prepare AWS infrastructure") {
            steps {
                echo "Preparing AWS infrastructure ..."
                sh "jenkins/jenkins/job-dsl/prepare-infra.sh"
            }
        }
        stage("Test") {
            steps {
                sh "javac -version"
                echo "Testing project"
                sh "mvn clean test"
            }
        }
        stage("Build artifact") {
            steps {
                echo "Building jar ..."
                sh "mvn clean package"
                sh "chmod +x jenkins/jenkins/job-dsl/*.sh"
                sh "jenkins/jenkins/job-dsl/postbuild-step.sh"
                archiveArtifacts artifacts: 'target/*.jar', onlyIfSuccessful: true
            }
        }
        stage("Deploy") {
            steps {
                echo "Deploying ..."
                sh "jenkins/jenkins/job-dsl/rolling-update-instances.sh"
                sh "jenkins/jenkins/job-dsl/check-webapp-response.sh"
            //  emailext body: 'Webapp endpoint: ${env.ELB_HOST}:${env.ELB_PORT}',
                emailext body: '${BUILD_LOG_REGEX, regex="Webapp endpoint", showTruncatedLines=false}',
                         subject: 'Web application Samsara was deployed',
                         to: 'lerkasan@gmail.com'
            }
        }
    }
}
