#!groovy

pipeline {
//    agent {
//        label 'slave-node'
//    }
//    tools {
//        jdk 'oracle-jdk8u144-linux-x64'
//        maven "maven-3.5.0"
//    }
    agent {
        docker {
            image 'xueshanf/awscli:latest'
        }
    }
    options {
        timestamps()
    }
    parameters {
        string(name: 'bucket_name', defaultValue: 'demo2-ssa', description: 'Bucket with JDK, liquibase binaries and artifact for Demo2')
        string(name: 'aws_ecr_url', defaultValue: 'https://370535134506.dkr.ecr.us-west-2.amazonaws.com', description: 'AWS Docker Container Registry URL')
    }
    environment {
        BUCKET_NAME="${params.bucket_name}"
        AWS_DEFAULT_REGION="us-west-2"
        AWS_SECRET_ACCESS_KEY = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_secret_access_key --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        AWS_ACCESS_KEY_ID = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name jenkins_access_key_id --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        CLUSTER_NAME = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo3_cluster_name --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()

        KOPS_STATE_STORE = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo3_kops_state_bucket --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        DB_NAME = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_name --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()

        DB_USER = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_user --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()

        DB_PASS = sh(
                script: "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} && aws ssm get-parameter --name demo2_db_pass --with-decryption --output text | awk '{print \$4}'",
                returnStdout: true
        ).trim()
        DB_HOST="samsara-postgres"
        DB_PORT=5432
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Cleaning workspace ..."
                cleanWs()
                echo "Checkout master branch to workspace folder and checkout jenkins branch to subfolder 'jenkins'"
                checkout(
                        [$class: 'GitSCM',
                         branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false,
                         browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/lerkasan/DevOps028.git'],
                         extensions: [[$class: 'CleanBeforeCheckout']],
                         gitTool: 'git',
                         submoduleCfg: [],
                         userRemoteConfigs: [[url: 'https://github.com/lerkasan/DevOps028.git', credentialsId: 'github_lerkasan']]
                        ])
            }
        }
        stage("Test and build jar") {
            agent {
                docker {
                    image 'maven:3.5.2-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                sh "javac -version"
                echo "Testing project ..."
                sh "mvn clean test"
                echo "Building jar ..."
                sh "mvn clean package"
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', onlyIfSuccessful: true
                    echo "Copying artifact to S3 bucket ..."
                    sh 'ARTIFACT_FILENAME=`ls ${WORKSPACE}/target | grep jar | grep -v original` && ' +
                            'aws s3 cp "${WORKSPACE}/target/${ARTIFACT_FILENAME}" "s3://demo2-ssa/artifacts/${ARTIFACT_FILENAME}" && ' +
                            'aws ssm put-parameter --name demo2_artifact_filename --value="${ARTIFACT_FILENAME}" --type String --overwrite'
                }
            }
        }
        stage("Build docker dependency and database images") {
            steps {
                parallel(
                    jdk_img_build: {
                        echo "Building docker images for dependecy and database..."
                        script {
                            jdkImage = docker.build("jdk8:152", "-f kubernetes/Dockerfile.jdk .")
                        }
                    },
                    db_img_build: {
                        script {
                            dbImage = docker.build("db:latest", "--build-arg DB_NAME=${DB_NAME} --build-arg DB_USER=${DB_USER} " +
                                        "--build-arg DB_PASS=${DB_PASS} -f kubernetes/Dockerfile.db .")
                        }
                    }
                )
            }
        }
        stage("Push docker dependency and database images to AWS ECR") {
            steps {
                parallel(
                    jdk_img_push: {
                        echo "Pushing dependency and database images to AWS ECR ..."
                        sh 'docker_pass=`aws ecr get-login --no-include-email --region us-west-2 | awk \'{print \$6}\'` && docker login -u AWS -p "${docker_pass}" https://370535134506.dkr.ecr.us-west-2.amazonaws.com/demo3'
                        script {
                            docker.withRegistry("${params.aws_ecr_url}") {
                                jdkImage.push()
                            }
                        }
                    },
                    db_img_push: {
                        sh 'docker_pass=`aws ecr get-login --no-include-email --region us-west-2 | awk \'{print \$6}\'` && docker login -u AWS -p "${docker_pass}" https://370535134506.dkr.ecr.us-west-2.amazonaws.com/demo3'
                        script {
                            docker.withRegistry("${params.aws_ecr_url}") {
                                dbImage.push()
                            }
                        }
                    }
                )
            }
            post {
                always {
                    // Delete Docker images from Jenkins slave node after pushing it to AWS Container Registry
                    sh "docker rmi `docker images -q` | true"
                }
            }
        }
        stage("Build and push samsara webapp image") {
            environment {
                ARTIFACT_FILENAME = sh(script: "ls ${WORKSPACE}/target | grep jar | grep -v original",
                        returnStdout: true
                ).trim()
            }
            steps {
                echo "Building and pushing samsara webapp image ..."
                sh "cp ${WORKSPACE}/target/${ARTIFACT_FILENAME} ."
                script {
                    samsaraImage = docker.build("samsara:latest", "--build-arg ARTIFACT_FILENAME=${ARTIFACT_FILENAME} --build-arg DB_NAME=${DB_NAME} " +
                            "--build-arg DB_PORT=${DB_PORT} --build-arg DB_HOST=${DB_HOST} --build-arg DB_USER=${DB_USER} --build-arg DB_PASS=${DB_PASS} .")
                    docker.withRegistry("${params.aws_ecr_url}") {
                        samsaraImage.push()
                    }
                }
            }
            post {
                always {
                    // Delete Docker images from Jenkins slave node after pushing it to AWS Container Registry
                    sh "docker rmi `docker images -q` | true"
                }
            }
        }
        stage("Create cluster") {
            agent {
                docker {
                    image 'airhelp/kops:latest'
                }
            }
            steps {
                echo "Creating cluster ..."
                sh "kops create -f kubernetes/cluster.yaml"
//                sh "kops replace -f kubernetes/cluster.yaml"
                sh "kops create secret --name ${CLUSTER_NAME} sshpublickey admin -i ~/.ssh/id_rsa.pub"
                sh "kops update cluster ${CLUSTER_NAME} --yes"
                sleep time: 3, unit: 'MINUTES'
                sh "kubectl create secret generic dbuser-pass --from-literal=password=mysecretpassword"
                sh "kubectl apply -f kubernetes/database.yaml"
                sleep time: 20, unit: 'SECONDS'
                sh "kubectl apply -f kubernetes/webapp.yaml"
                sleep time: 20, unit: 'SECONDS'
                sh "kubectl apply -f kubernetes/pod.yaml"
                sleep time: 20, unit: 'SECONDS'
                sh "aws s3 cp ~/.kube/config ${KOPS_STATE_STORE}/kube-config"
                echo "Adding dashboard ..."
                sh "kubectl apply -f https://raw.githubusercontent.com/kubernetes/kops/master/addons/kubernetes-dashboard/v1.7.1.yaml"
                sleep time: 20, unit: 'SECONDS'
            }
        }
        stage("Deploy webapp") {
            agent {
                docker {
                    image 'airhelp/kops:latest'
                }
            }
            environment {
                ELB_HOST = sh(script: "kubectl describe svc samsara | grep Ingress | awk '{print \$3}'",
                        returnStdout: true
                ).trim()
            }
            steps {
                sh "kops update cluster ${CLUSTER_NAME} --yes"
                sh "kops rolling-update cluster ${CLUSTER_NAME} --yes"
                sleep time: 2, unit: 'MINUTES'
            }
            post {
                success {
                    echo "Checking connectivity to webapp load balancer ..."
                    script {
                        def response = httpRequest url: "http://${ELB_HOST}:9000/login", httpMode: 'GET', timeout: 60, consoleLogResponseBody: true
                        println("Webapp HTTP_RESPONSE_CODE = " + response.getStatus())
                        println("Webapp endpoint: ${ELB_HOST}:9000")
                    }
                }
            }
        }
    }
    post {
        success {
            emailext body: '${BUILD_LOG_REGEX, regex="Webapp endpoint", showTruncatedLines=false}',
                    subject: 'Web application Samsara was deployed',
                    to: 'lerkasan@gmail.com'
        }
        failure {
            emailext attachLog: true,
                    body: 'Build log is attached.',
                    subject: 'Web application Samsara deploy failed',
                    to: 'lerkasan@gmail.com'
        }
    }
}
